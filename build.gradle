plugins {
  id 'java-library'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(19)
  }
}

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
  useJUnitPlatform()
}

// The runtime environment this JAR will be deployed to doesn't know what this model depends on.
// So the generated JAR must include its dependencies. (Except `merlin-sdk`, which is marked `compileTimeApi` by
// `merlin-framework`, so that the runtime system and model JAR can agree on the same interfaces.)
jar {
  from {
    configurations.runtimeClasspath.filter{ it.exists() }.collect{ it.isDirectory() ? it : zipTree(it) }
  } {
    exclude 'META-INF/LICENSE.txt', 'META-INF/NOTICE.txt'
  }
}

dependencies {
  annotationProcessor 'gov.nasa.jpl.aerie:merlin-framework-processor:+'
  implementation 'gov.nasa.jpl.aerie:contrib:+'
  implementation 'gov.nasa.jpl.aerie:merlin-framework:+'
  implementation 'gov.nasa.jpl.aerie:merlin-sdk:+'
  implementation 'gov.nasa.jpl.aerie:parsing-utilities:+'
  testImplementation 'gov.nasa.jpl.aerie:merlin-framework-junit:+'
  testImplementation 'org.junit.jupiter:junit-jupiter:+'
  testImplementation 'org.assertj:assertj-core:3.22.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

allprojects {
  repositories {
    // Search the local filesystem before attempting remote repositories.
    flatDir { dirs "$rootDir/third-party" }
    mavenCentral()
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/nasa-ammos/aerie"
        credentials {
          username = System.getenv('GITHUB_ACTOR')
          password = System.getenv('GITHUB_TOKEN')
        }
    }
  }
}
